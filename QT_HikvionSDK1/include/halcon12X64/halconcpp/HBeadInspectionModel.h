/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 12.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HBEADINSPECTIONMODEL
#define HCPP_HBEADINSPECTIONMODEL

namespace HalconCpp
{

// Represents an instance of the data structure used to inspect beads.
class LIntExport HBeadInspectionModel : public HToolBase
{

public:

  // Create an uninitialized instance
  HBeadInspectionModel():HToolBase() {}

  // Copy constructor
  HBeadInspectionModel(const HBeadInspectionModel& source) : HToolBase(source) {}

  // Create HBeadInspectionModel from handle, taking ownership
  explicit HBeadInspectionModel(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // create_bead_inspection_model: Create a model to inspect beads or adhesive in images.
  explicit HBeadInspectionModel(const HXLD& BeadContour, const HTuple& TargetThickness, const HTuple& ThicknessTolerance, const HTuple& PositionTolerance, const HString& Polarity, const HTuple& GenParamNames, const HTuple& GenParamValues);

  // create_bead_inspection_model: Create a model to inspect beads or adhesive in images.
  explicit HBeadInspectionModel(const HXLD& BeadContour, Hlong TargetThickness, Hlong ThicknessTolerance, Hlong PositionTolerance, const HString& Polarity, const HString& GenParamNames, Hlong GenParamValues);

  // create_bead_inspection_model: Create a model to inspect beads or adhesive in images.
  explicit HBeadInspectionModel(const HXLD& BeadContour, Hlong TargetThickness, Hlong ThicknessTolerance, Hlong PositionTolerance, const char* Polarity, const char* GenParamNames, Hlong GenParamValues);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Get the value of a parameter in a specific bead inspection model.
  HTuple GetBeadInspectionParam(const HTuple& ParamName) const;

  // Get the value of a parameter in a specific bead inspection model.
  HTuple GetBeadInspectionParam(const HString& ParamName) const;

  // Get the value of a parameter in a specific bead inspection model.
  HTuple GetBeadInspectionParam(const char* ParamName) const;

  // Set parameters of the bead inspection model.
  void SetBeadInspectionParam(const HTuple& ParamName, const HTuple& ParamValue) const;

  // Set parameters of the bead inspection model.
  void SetBeadInspectionParam(const HString& ParamName, const HString& ParamValue) const;

  // Set parameters of the bead inspection model.
  void SetBeadInspectionParam(const char* ParamName, const char* ParamValue) const;

  // Inspect beads in an image, as defined by the bead inspection model.
  HXLD ApplyBeadInspectionModel(const HImage& Image, HXLD* RightContour, HXLD* ErrorSegment, HTuple* ErrorType) const;

  // Create a model to inspect beads or adhesive in images.
  void CreateBeadInspectionModel(const HXLD& BeadContour, const HTuple& TargetThickness, const HTuple& ThicknessTolerance, const HTuple& PositionTolerance, const HString& Polarity, const HTuple& GenParamNames, const HTuple& GenParamValues);

  // Create a model to inspect beads or adhesive in images.
  void CreateBeadInspectionModel(const HXLD& BeadContour, Hlong TargetThickness, Hlong ThicknessTolerance, Hlong PositionTolerance, const HString& Polarity, const HString& GenParamNames, Hlong GenParamValues);

  // Create a model to inspect beads or adhesive in images.
  void CreateBeadInspectionModel(const HXLD& BeadContour, Hlong TargetThickness, Hlong ThicknessTolerance, Hlong PositionTolerance, const char* Polarity, const char* GenParamNames, Hlong GenParamValues);

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HToolArrayRef;

typedef HToolArrayRef<HBeadInspectionModel> HBeadInspectionModelArrayRef;
typedef HSmartPtr< HBeadInspectionModelArrayRef > HBeadInspectionModelArrayPtr;


// Represents multiple tool instances
class LIntExport HBeadInspectionModelArray : public HToolArray
{

public:

  // Create empty array
  HBeadInspectionModelArray();

  // Create array from native array of tool instances
  HBeadInspectionModelArray(HBeadInspectionModel* classes, Hlong length);

  // Copy constructor
  HBeadInspectionModelArray(const HBeadInspectionModelArray &tool_array);

  // Destructor
  virtual ~HBeadInspectionModelArray();

  // Assignment operator
  HBeadInspectionModelArray &operator=(const HBeadInspectionModelArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HBeadInspectionModel* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HBeadInspectionModelArrayPtr *mArrayPtr;
};

}

#endif
