/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 12.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HCLASSBOX
#define HCPP_HCLASSBOX

namespace HalconCpp
{

// Represents an instance of a classifier.
class LIntExport HClassBox : public HToolBase
{

public:

  // Copy constructor
  HClassBox(const HClassBox& source) : HToolBase(source) {}

  // Create HClassBox from handle, taking ownership
  explicit HClassBox(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);

  // Deep copy of all data represented by this object instance
  HClassBox Clone() const;



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // create_class_box: Create a new classifier.
  explicit HClassBox();




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Train a classificator using a multi-channel image.
  void LearnNdimBox(const HRegion& Foreground, const HRegion& Background, const HImage& MultiChannelImage) const;

  // Classify pixels using hyper-cuboids.
  HRegion ClassNdimBox(const HImage& MultiChannelImage) const;

  // Deserialize a serialized classifier.
  void DeserializeClassBox(const HSerializedItem& SerializedItemHandle) const;

  // Serialize a classifier.
  HSerializedItem SerializeClassBox() const;

  // Save a classifier in a file.
  void WriteClassBox(const HString& FileName) const;

  // Save a classifier in a file.
  void WriteClassBox(const char* FileName) const;

  // Set system parameters for classification.
  void SetClassBoxParam(const HString& Flag, const HTuple& Value) const;

  // Set system parameters for classification.
  void SetClassBoxParam(const HString& Flag, double Value) const;

  // Set system parameters for classification.
  void SetClassBoxParam(const char* Flag, double Value) const;

  // Read a classifier from a file.
  void ReadClassBox(const HString& FileName) const;

  // Read a classifier from a file.
  void ReadClassBox(const char* FileName) const;

  // Train the classifier with one data set.
  void LearnSampsetBox(const HFeatureSet& SampKey, const HString& Outfile, Hlong NSamples, double StopError, Hlong ErrorN) const;

  // Train the classifier with one data set.
  void LearnSampsetBox(const HFeatureSet& SampKey, const char* Outfile, Hlong NSamples, double StopError, Hlong ErrorN) const;

  // Train the classifier.
  void LearnClassBox(const HTuple& Features, Hlong Class) const;

  // Get information about the current parameter.
  HTuple GetClassBoxParam(const HString& Flag) const;

  // Get information about the current parameter.
  HTuple GetClassBoxParam(const char* Flag) const;

  // Create a new classifier.
  void CreateClassBox();

  // Describe the classes of a box classifier.
  HTuple DescriptClassBox(Hlong Dimensions, HTuple* BoxIdx, HTuple* BoxLowerBound, HTuple* BoxHigherBound, HTuple* BoxNumSamplesTrain, HTuple* BoxNumSamplesWrong) const;

  // Describe the classes of a box classifier.
  Hlong DescriptClassBox(Hlong Dimensions, Hlong* BoxIdx, Hlong* BoxLowerBound, Hlong* BoxHigherBound, Hlong* BoxNumSamplesTrain, Hlong* BoxNumSamplesWrong) const;

  // Classify a set of arrays.
  double TestSampsetBox(const HFeatureSet& SampKey) const;

  // Classify a tuple of attributes with rejection class.
  Hlong EnquireRejectClassBox(const HTuple& FeatureList) const;

  // Classify a tuple of attributes.
  Hlong EnquireClassBox(const HTuple& FeatureList) const;

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HToolArrayRef;

typedef HToolArrayRef<HClassBox> HClassBoxArrayRef;
typedef HSmartPtr< HClassBoxArrayRef > HClassBoxArrayPtr;


// Represents multiple tool instances
class LIntExport HClassBoxArray : public HToolArray
{

public:

  // Create empty array
  HClassBoxArray();

  // Create array from native array of tool instances
  HClassBoxArray(HClassBox* classes, Hlong length);

  // Copy constructor
  HClassBoxArray(const HClassBoxArray &tool_array);

  // Destructor
  virtual ~HClassBoxArray();

  // Assignment operator
  HClassBoxArray &operator=(const HClassBoxArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HClassBox* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HClassBoxArrayPtr *mArrayPtr;
};

}

#endif
