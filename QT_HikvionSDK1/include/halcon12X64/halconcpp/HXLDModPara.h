/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 12.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HXLDMODPARA
#define HCPP_HXLDMODPARA

namespace HalconCpp
{

// Represents an instance of an XLD modified parallel object(-array).
class LIntExport HXLDModPara : public HXLD
{

public:

  // Create an uninitialized instance
  HXLDModPara():HXLD() {}

  // Copy constructor
  HXLDModPara(const HXLDModPara& source) : HXLD(source) {}

  // Copy constructor
  HXLDModPara(const HObject& object);

  // Create HXLDModPara from object id. For copy=false takes
  // over management of input key. Type of key must match!
  explicit HXLDModPara(Hkey key, bool copy=true);

  // Access of object tuple element
  const HXLDModPara operator [] (Hlong index) const;




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Combine road hypotheses from two resolution levels.
  HXLDPoly CombineRoadsXld(const HXLDPoly& EdgePolygons, const HXLDExtPara& ExtParallels, const HXLDPoly& CenterLines, const HTuple& MaxAngleParallel, const HTuple& MaxAngleColinear, const HTuple& MaxDistanceParallel, const HTuple& MaxDistanceColinear) const;

  // Combine road hypotheses from two resolution levels.
  HXLDPoly CombineRoadsXld(const HXLDPoly& EdgePolygons, const HXLDExtPara& ExtParallels, const HXLDPoly& CenterLines, double MaxAngleParallel, double MaxAngleColinear, double MaxDistanceParallel, double MaxDistanceColinear) const;

  // Calculate the difference of two object tuples.
  HXLDModPara ObjDiff(const HXLDModPara& ObjectsSub) const;

  // Copy an iconic object in the HALCON database.
  HXLDModPara CopyObj(Hlong Index, Hlong NumObj) const;

  // Concatenate two iconic object tuples.
  HXLDModPara ConcatObj(const HXLDModPara& Objects2) const;

  // Select objects from an object tuple.
  HXLDModPara SelectObj(const HTuple& Index) const;

  // Select objects from an object tuple.
  HXLDModPara SelectObj(Hlong Index) const;

  // Compare iconic objects regarding equality.
  Hlong CompareObj(const HXLDModPara& Objects2, const HTuple& Epsilon) const;

  // Compare iconic objects regarding equality.
  Hlong CompareObj(const HXLDModPara& Objects2, double Epsilon) const;

  // Compare image objects regarding equality.
  Hlong TestEqualObj(const HXLDModPara& Objects2) const;

  // Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
  HImage GenGridRectificationMap(const HImage& Image, HXLDModPara* Meshes, Hlong GridSpacing, const HTuple& Rotation, const HTuple& Row, const HTuple& Column, const HString& MapType) const;

  // Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
  HImage GenGridRectificationMap(const HImage& Image, HXLDModPara* Meshes, Hlong GridSpacing, const HString& Rotation, const HTuple& Row, const HTuple& Column, const HString& MapType) const;

  // Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
  HImage GenGridRectificationMap(const HImage& Image, HXLDModPara* Meshes, Hlong GridSpacing, const char* Rotation, const HTuple& Row, const HTuple& Column, const char* MapType) const;

  // Choose all contours or polygons containing a given point.
  HXLDModPara SelectXldPoint(const HTuple& Row, const HTuple& Column) const;

  // Choose all contours or polygons containing a given point.
  HXLDModPara SelectXldPoint(double Row, double Column) const;

  // Select contours or polygons using shape features.
  HXLDModPara SelectShapeXld(const HTuple& Features, const HString& Operation, const HTuple& Min, const HTuple& Max) const;

  // Select contours or polygons using shape features.
  HXLDModPara SelectShapeXld(const HString& Features, const HString& Operation, double Min, double Max) const;

  // Select contours or polygons using shape features.
  HXLDModPara SelectShapeXld(const char* Features, const char* Operation, double Min, double Max) const;

  // Transform the shape of contours or polygons.
  HXLDModPara ShapeTransXld(const HString& Type) const;

  // Transform the shape of contours or polygons.
  HXLDModPara ShapeTransXld(const char* Type) const;

private:

  // Verify matching semantic type ('xld_mod_para')!
  void AssertObjectClass();

};

}

#endif
