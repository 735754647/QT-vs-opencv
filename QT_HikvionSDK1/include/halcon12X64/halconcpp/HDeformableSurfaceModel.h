/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 12.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HDEFORMABLESURFACEMODEL
#define HCPP_HDEFORMABLESURFACEMODEL

namespace HalconCpp
{

// Represents an instance of a deformable surface model.
class LIntExport HDeformableSurfaceModel : public HToolBase
{

public:

  // Create an uninitialized instance
  HDeformableSurfaceModel():HToolBase() {}

  // Copy constructor
  HDeformableSurfaceModel(const HDeformableSurfaceModel& source) : HToolBase(source) {}

  // Create HDeformableSurfaceModel from handle, taking ownership
  explicit HDeformableSurfaceModel(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);

  // Deep copy of all data represented by this object instance
  HDeformableSurfaceModel Clone() const;



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // read_deformable_surface_model: Read a deformable surface model from a file.
  explicit HDeformableSurfaceModel(const HString& FileName);

  // read_deformable_surface_model: Read a deformable surface model from a file.
  explicit HDeformableSurfaceModel(const char* FileName);

  // create_deformable_surface_model: Create the data structure needed to perform deformable surface-based matching.
  explicit HDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HTuple& GenParamName, const HTuple& GenParamValue);

  // create_deformable_surface_model: Create the data structure needed to perform deformable surface-based matching.
  explicit HDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HString& GenParamName, const HString& GenParamValue);

  // create_deformable_surface_model: Create the data structure needed to perform deformable surface-based matching.
  explicit HDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const char* GenParamName, const char* GenParamValue);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Deserialize a deformable surface model.
  void DeserializeDeformableSurfaceModel(const HSerializedItem& SerializedItemHandle);

  // Serialize a deformable surface_model.
  HSerializedItem SerializeDeformableSurfaceModel() const;

  // Read a deformable surface model from a file.
  void ReadDeformableSurfaceModel(const HString& FileName);

  // Read a deformable surface model from a file.
  void ReadDeformableSurfaceModel(const char* FileName);

  // Write a deformable surface model to a file.
  void WriteDeformableSurfaceModel(const HString& FileName) const;

  // Write a deformable surface model to a file.
  void WriteDeformableSurfaceModel(const char* FileName) const;

  // Refine the position and deformation of a deformable surface model in a 3D scene.
  HTuple RefineDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HObjectModel3D& InitialDeformationObjectModel3D, const HTuple& GenParamName, const HTuple& GenParamValue, HDeformableSurfaceMatchingResultArray* DeformableSurfaceMatchingResult) const;

  // Refine the position and deformation of a deformable surface model in a 3D scene.
  double RefineDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HObjectModel3D& InitialDeformationObjectModel3D, const HString& GenParamName, const HString& GenParamValue, HDeformableSurfaceMatchingResult* DeformableSurfaceMatchingResult) const;

  // Refine the position and deformation of a deformable surface model in a 3D scene.
  double RefineDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HObjectModel3D& InitialDeformationObjectModel3D, const char* GenParamName, const char* GenParamValue, HDeformableSurfaceMatchingResult* DeformableSurfaceMatchingResult) const;

  // Find the best match of a deformable surface model in a 3D scene.
  HTuple FindDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HTuple& MinScore, const HTuple& GenParamName, const HTuple& GenParamValue, HDeformableSurfaceMatchingResultArray* DeformableSurfaceMatchingResult) const;

  // Find the best match of a deformable surface model in a 3D scene.
  double FindDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, double MinScore, const HTuple& GenParamName, const HTuple& GenParamValue, HDeformableSurfaceMatchingResult* DeformableSurfaceMatchingResult) const;

  // Return the parameters and properties of a deformable surface model.
  HTuple GetDeformableSurfaceModelParam(const HTuple& ParamName) const;

  // Return the parameters and properties of a deformable surface model.
  HTuple GetDeformableSurfaceModelParam(const HString& ParamName) const;

  // Return the parameters and properties of a deformable surface model.
  HTuple GetDeformableSurfaceModelParam(const char* ParamName) const;

  // Add a reference point to a deformable surface model.
  HTuple AddDeformableSurfaceModelReferencePoint(const HTuple& ReferencePointX, const HTuple& ReferencePointY, const HTuple& ReferencePointZ) const;

  // Add a reference point to a deformable surface model.
  Hlong AddDeformableSurfaceModelReferencePoint(double ReferencePointX, double ReferencePointY, double ReferencePointZ) const;

  // Add a sample deformation to a deformable surface model
  void AddDeformableSurfaceModelSample(const HObjectModel3DArray& ObjectModel3D) const;

  // Add a sample deformation to a deformable surface model
  void AddDeformableSurfaceModelSample(const HObjectModel3D& ObjectModel3D) const;

  // Create the data structure needed to perform deformable surface-based matching.
  void CreateDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HTuple& GenParamName, const HTuple& GenParamValue);

  // Create the data structure needed to perform deformable surface-based matching.
  void CreateDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const HString& GenParamName, const HString& GenParamValue);

  // Create the data structure needed to perform deformable surface-based matching.
  void CreateDeformableSurfaceModel(const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, const char* GenParamName, const char* GenParamValue);

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HToolArrayRef;

typedef HToolArrayRef<HDeformableSurfaceModel> HDeformableSurfaceModelArrayRef;
typedef HSmartPtr< HDeformableSurfaceModelArrayRef > HDeformableSurfaceModelArrayPtr;


// Represents multiple tool instances
class LIntExport HDeformableSurfaceModelArray : public HToolArray
{

public:

  // Create empty array
  HDeformableSurfaceModelArray();

  // Create array from native array of tool instances
  HDeformableSurfaceModelArray(HDeformableSurfaceModel* classes, Hlong length);

  // Copy constructor
  HDeformableSurfaceModelArray(const HDeformableSurfaceModelArray &tool_array);

  // Destructor
  virtual ~HDeformableSurfaceModelArray();

  // Assignment operator
  HDeformableSurfaceModelArray &operator=(const HDeformableSurfaceModelArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HDeformableSurfaceModel* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HDeformableSurfaceModelArrayPtr *mArrayPtr;
};

}

#endif
