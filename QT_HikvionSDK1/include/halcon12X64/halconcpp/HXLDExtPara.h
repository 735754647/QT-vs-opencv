/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 12.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HXLDEXTPARA
#define HCPP_HXLDEXTPARA

namespace HalconCpp
{

// Represents an instance of an XLD extended parallel object(-array).
class LIntExport HXLDExtPara : public HXLD
{

public:

  // Create an uninitialized instance
  HXLDExtPara():HXLD() {}

  // Copy constructor
  HXLDExtPara(const HXLDExtPara& source) : HXLD(source) {}

  // Copy constructor
  HXLDExtPara(const HObject& object);

  // Create HXLDExtPara from object id. For copy=false takes
  // over management of input key. Type of key must match!
  explicit HXLDExtPara(Hkey key, bool copy=true);

  // Access of object tuple element
  const HXLDExtPara operator [] (Hlong index) const;




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Join modified XLD parallels lying on the same polygon.
  HXLDPoly MaxParallelsXld() const;

  // Calculate the difference of two object tuples.
  HXLDExtPara ObjDiff(const HXLDExtPara& ObjectsSub) const;

  // Copy an iconic object in the HALCON database.
  HXLDExtPara CopyObj(Hlong Index, Hlong NumObj) const;

  // Concatenate two iconic object tuples.
  HXLDExtPara ConcatObj(const HXLDExtPara& Objects2) const;

  // Select objects from an object tuple.
  HXLDExtPara SelectObj(const HTuple& Index) const;

  // Select objects from an object tuple.
  HXLDExtPara SelectObj(Hlong Index) const;

  // Compare iconic objects regarding equality.
  Hlong CompareObj(const HXLDExtPara& Objects2, const HTuple& Epsilon) const;

  // Compare iconic objects regarding equality.
  Hlong CompareObj(const HXLDExtPara& Objects2, double Epsilon) const;

  // Compare image objects regarding equality.
  Hlong TestEqualObj(const HXLDExtPara& Objects2) const;

  // Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
  HImage GenGridRectificationMap(const HImage& Image, HXLDExtPara* Meshes, Hlong GridSpacing, const HTuple& Rotation, const HTuple& Row, const HTuple& Column, const HString& MapType) const;

  // Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
  HImage GenGridRectificationMap(const HImage& Image, HXLDExtPara* Meshes, Hlong GridSpacing, const HString& Rotation, const HTuple& Row, const HTuple& Column, const HString& MapType) const;

  // Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
  HImage GenGridRectificationMap(const HImage& Image, HXLDExtPara* Meshes, Hlong GridSpacing, const char* Rotation, const HTuple& Row, const HTuple& Column, const char* MapType) const;

  // Choose all contours or polygons containing a given point.
  HXLDExtPara SelectXldPoint(const HTuple& Row, const HTuple& Column) const;

  // Choose all contours or polygons containing a given point.
  HXLDExtPara SelectXldPoint(double Row, double Column) const;

  // Select contours or polygons using shape features.
  HXLDExtPara SelectShapeXld(const HTuple& Features, const HString& Operation, const HTuple& Min, const HTuple& Max) const;

  // Select contours or polygons using shape features.
  HXLDExtPara SelectShapeXld(const HString& Features, const HString& Operation, double Min, double Max) const;

  // Select contours or polygons using shape features.
  HXLDExtPara SelectShapeXld(const char* Features, const char* Operation, double Min, double Max) const;

  // Transform the shape of contours or polygons.
  HXLDExtPara ShapeTransXld(const HString& Type) const;

  // Transform the shape of contours or polygons.
  HXLDExtPara ShapeTransXld(const char* Type) const;

private:

  // Verify matching semantic type ('xld_ext_para')!
  void AssertObjectClass();

};

}

#endif
