/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 12.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HGNUPLOT
#define HCPP_HGNUPLOT

namespace HalconCpp
{

// Represents an instance of a connection to a gnuplot process.
class LIntExport HGnuplot : public HToolBase
{

public:

  // Create an uninitialized instance
  HGnuplot():HToolBase() {}

  // Copy constructor
  HGnuplot(const HGnuplot& source) : HToolBase(source) {}

  // Create HGnuplot from handle, taking ownership
  explicit HGnuplot(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Plot a function using gnuplot.
  void GnuplotPlotFunct1d(const HFunction1D& Function) const;

  // Plot control values using gnuplot.
  void GnuplotPlotCtrl(const HTuple& Values) const;

  // Visualize images using gnuplot.
  void GnuplotPlotImage(const HImage& Image, Hlong SamplesX, Hlong SamplesY, const HTuple& ViewRotX, const HTuple& ViewRotZ, const HString& Hidden3D) const;

  // Visualize images using gnuplot.
  void GnuplotPlotImage(const HImage& Image, Hlong SamplesX, Hlong SamplesY, double ViewRotX, double ViewRotZ, const HString& Hidden3D) const;

  // Visualize images using gnuplot.
  void GnuplotPlotImage(const HImage& Image, Hlong SamplesX, Hlong SamplesY, double ViewRotX, double ViewRotZ, const char* Hidden3D) const;

  // Open a gnuplot file for visualization of images and control values.
  void GnuplotOpenFile(const HString& FileName);

  // Open a gnuplot file for visualization of images and control values.
  void GnuplotOpenFile(const char* FileName);

  // Open a pipe to a gnuplot process for visualization of images and control values.
  void GnuplotOpenPipe();

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HToolArrayRef;

typedef HToolArrayRef<HGnuplot> HGnuplotArrayRef;
typedef HSmartPtr< HGnuplotArrayRef > HGnuplotArrayPtr;


// Represents multiple tool instances
class LIntExport HGnuplotArray : public HToolArray
{

public:

  // Create empty array
  HGnuplotArray();

  // Create array from native array of tool instances
  HGnuplotArray(HGnuplot* classes, Hlong length);

  // Copy constructor
  HGnuplotArray(const HGnuplotArray &tool_array);

  // Destructor
  virtual ~HGnuplotArray();

  // Assignment operator
  HGnuplotArray &operator=(const HGnuplotArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HGnuplot* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HGnuplotArrayPtr *mArrayPtr;
};

}

#endif
